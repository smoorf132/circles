import asyncio
import logging
import os
from typing import List

import aiofiles
import aiogram.filters
import asyncpg
import ujson
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InlineKeyboardButton, KeyboardButton, CallbackQuery
from aiogram.types import Message
from aiogram.utils.keyboard import KeyboardBuilder
from aiogram.utils.media_group import MediaGroupBuilder

from db.repo import Repo
from middlewares.setup import setup_main_middlewares
from sending_module import TestSending

TOKEN = "6179056274:AAF86swPHkVF3MNoJp9HhImZQw7qeBfSNtw"
dp = Dispatcher()
logger = logging.getLogger(__name__)

session = AiohttpSession()
bot = Bot(TOKEN, parse_mode="html")

CIDS = [[-1001345824533, 'https://t.me/+TdB59i41avA4M2Ji'],
        [-1001508161723, 'https://t.me/+cNPd-HPsqEY1YmIy']]  # –∫—Ä—É–ø–Ω—ã–π


class Mailing(StatesGroup):
    waiting_for_message = State()
    album_state = State()


async def create_pool(user, password, database, host):
    pool = await asyncpg.create_pool(database=database,
                                     user=user,
                                     password=password,
                                     host=host,
                                     max_inactive_connection_lifetime=1,
                                     max_size=100
                                     )
    return pool


def conv_kb():
    channels_two = KeyboardBuilder(button_type=KeyboardButton)
    channel_key = KeyboardButton(text='üì• –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å')
    channels_two.add(channel_key)
    return channels_two.as_markup(resize_keyboard=True)


async def subscription_check(user_id):
    channels_two = KeyboardBuilder(button_type=InlineKeyboardButton)
    for CID in CIDS:
        if (await bot.get_chat_member(CID[0], user_id)).status == 'left':
            channel_key = InlineKeyboardButton(text='üéØ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url=CID[1])
            channels_two.row(channel_key, width=1)
        else:
            pass
    menu = InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üîÑ', callback_data="CheckSub")
    channels_two.row(menu, width=1)
    return channels_two.as_markup()


async def checker(uid):
    for CID in CIDS:
        if (await bot.get_chat_member(CID[0], uid)).status == 'left':
            return 'bad'
    return 'good'


async def o_p(message: Message):
    await message.answer('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã!\n\n'
                         '–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª',
                         reply_markup=await subscription_check(message.from_user.id))


@dp.message(Command(commands=["admin_mailing"]))
async def command_mailing_handler(message: Message, state: FSMContext) -> None:
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state(Mailing.waiting_for_message)


def approve_mailing_kb():
    channels_two = KeyboardBuilder(button_type=InlineKeyboardButton)
    menu = InlineKeyboardButton(text='üî•–£–≤–µ—Ä–µ–Ω', callback_data="mailing_approve")
    channels_two.row(menu, width=1)
    return channels_two.as_markup()


@dp.message(Command(commands=["start"]))
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    await repo.create_user(message.from_user.id)
    if await checker(message.from_user.id) == 'bad':
        await o_p(message)
        return"""
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}!</b>

–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ª—é–±–æ–µ —Å–≤–æ–µ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ!

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëá""", reply_markup=conv_kb())
    await state.clear()


@dp.message(Mailing.waiting_for_message, F.media_group_id)
async def mailing_media_group(
        message: Message,
        state: FSMContext,
        album: List[Message]
):
    await state.set_state(Mailing.album_state)
    builder = MediaGroupBuilder()
    for element in album:
        caption_kwargs = {"caption": element.html_text, "caption_entities": element.caption_entities,
                          "parse_mode": "html"}
        if element.photo:
            builder.add_photo(media=element.photo[-1].file_id, **caption_kwargs)
        elif element.video:
            builder.add_video(media=element.video.file_id, **caption_kwargs)
        elif element.document:
            builder.add_document(media=element.document.file_id, **caption_kwargs)
        elif element.audio:
            builder.add_audio(media=element.audio.file_id, **caption_kwargs)
        else:
            return message.answer("This media type isn't supported!")

    album_list_pack = [model.model_dump() for model in builder.build()]
    album_pack = ujson.dumps(album_list_pack)
    print(album_pack)
    await state.update_data(album_pack=album_pack)
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n'
                         '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.',
                         reply_markup=approve_mailing_kb())


@dp.message(Mailing.waiting_for_message)
async def mailing_message(
        message: Message,
        state: FSMContext,
):
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n'
                         '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.',
                         reply_markup=approve_mailing_kb())
    await state.update_data(mailing_message=message.model_dump_json())


@dp.callback_query(Mailing.album_state, F.data == 'mailing_approve')
async def mailing_group_approver(call: CallbackQuery,
                                 state: FSMContext, repo: Repo):
    await call.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è')
    user_data = await state.get_data()
    to_mailing_message = user_data.get('album_pack')
    users = await repo.get_sending_users()
    task = TestSending(to_mailing_message, users)
    asyncio.create_task(task.group_worker(call.from_user.id))


@dp.callback_query(F.data == 'mailing_approve')
async def mailing_approver(call: CallbackQuery,
                           state: FSMContext, repo: Repo):
    await call.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è')
    user_data = await state.get_data()
    to_mailing_message = Message.model_validate_json(user_data.get('mailing_message'))
    users = await repo.get_sending_users()
    task = TestSending(to_mailing_message, users)
    asyncio.create_task(task.worker())


@dp.message(Command(commands=["admin_users"]))
async def command_answer_handler(message: Message, state: FSMContext, repo: Repo) -> None:
    attempts_all = await repo.get_all_count_attempts()
    users = await repo.get_count_users()
    await message.answer(f"–Æ–∑–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ: {users}\n"
                         f"–ü–æ–ø—ã—Ç–æ–∫ –≤—Å–µ–≥–æ: {attempts_all}\n")
    await state.clear()


@dp.message(Command(commands=["help"]))
async def command_help_handler(message: Message) -> None:
    await message.answer(f"""
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: <a href="https://telegra.ph/FAQ-Kruzhki-dlya-dialogov-01-27-2">–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫—Ä—É–∂–æ—á–µ–∫?</a>

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã - @lazarenko_tg""")


@dp.callback_query(F.data == 'CheckSub')
async def call_checker(call: aiogram.types.CallbackQuery):
    if await checker(call.from_user.id) == 'bad':
        await call.answer('–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è', show_alert=True)
        return
    else:
        await call.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º', )
        await call.message.delete()
        await call.message.answer("""<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫—Ä—É–∂–æ—á–∫–∞.</b>

‚ùóÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> <i>—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª—Å—è –∫—Ä—É–≥–ª—è—à–æ–∫ ‚Äì –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º.

–î–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–µ–∂—å—Ç–µ –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.

‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ - –¥–æ 60 —Å–µ–∫.</i>

<b>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help</b>""",
                                  reply_markup=conv_kb())


@dp.message(F.video)
async def echo_handler(message: types.Message) -> None:
    if await checker(message.from_user.id) == 'bad':
        await o_p(message)
        return
    try:
        height = message.video.height
        width = message.video.width
        if height != width:
            await message.answer('üîó–í–∏–¥–µ–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1:1\n\n'
                                 '<b>–°–º–æ—Ç—Ä–∏ <a href="https://telegra.ph/FAQ-Kruzhki-dlya-dialogov-01-27-2">'
                                 '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!</a></b>')
            return
        elif height > 640 or width > 640:
            await message.answer('‚ùå –®–∏—Ä–∏–Ω–∞ –∏–ª–∏ –≤—ã—Å–æ—Ç–∞ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ —á–µ–º 640.\n'
                                 '–†–∞–∑–º–µ—Ä—ã –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ {}x{} (–®x–í), –∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–Ω—å—à–µ 640'.format(width, height))
        else:
            m = await message.answer('üîÑ–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ\n'
                                     '<i>–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 10 –¥–æ 20 —Å–µ–∫—É–Ω–¥</i>')
            file_info = await bot.get_file(message.video.file_id)
            print(file_info.file_path)
            downloaded_file = await bot.download_file(file_info.file_path)
            filename = f'{file_info.file_id}.{"mp4"}'
            src = file_info.file_id + filename
            async with aiofiles.open(src, 'wb') as new_file:
                await new_file.write(downloaded_file.read())
            vd = FSInputFile(path=src)
            await m.delete()
            await message.answer_video_note(video_note=vd)
            os.remove(src)
            await message.answer('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ! üëÜ')
    except TypeError:
        await message.answer("Nice try!")


@dp.message(F.text)
async def echo(message: types.Message) -> None:
    await message.answer("""<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫—Ä—É–∂–æ—á–∫–∞.</b>

‚ùóÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> <i>—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª—Å—è –∫—Ä—É–≥–ª—è—à–æ–∫ ‚Äì –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º.

–î–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–µ–∂—å—Ç–µ –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.

‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ - –¥–æ 60 —Å–µ–∫.</i>

<b>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help</b>""")


async def on_startup(dispatcher: Dispatcher):
    pool = await create_pool(
        user='circle_user',
        password='Haxonebot123',
        database='tg_circles',
        host='185.174.136.21'
    )
    setup_main_middlewares(dispatcher, pool)


def main() -> None:
    # And the run events dispatching
    dp.startup.register(on_startup)
    dp.run_polling(bot)


if __name__ == "__main__":
    main()
